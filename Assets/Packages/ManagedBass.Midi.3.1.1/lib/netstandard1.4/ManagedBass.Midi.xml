<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ManagedBass.Midi</name>
    </assembly>
    <members>
        <member name="T:ManagedBass.Midi.MidiFilterProcedure">
            <summary>
            User defined callback to filter events.
            </summary>
            <param name="Handle">The MIDI stream handle.</param>
            <param name="Track">The track that the event is from... 0 = 1st track.</param>
            <param name="Event">The event structure.</param>
            <param name="Seeking">true = the event is being processed while seeking, false = the event is being played.</param>
            <param name="User">The user instance data given when <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFilter(System.Int32,System.Boolean,ManagedBass.Midi.MidiFilterProcedure,System.IntPtr)"/> was called.</param>
            <returns>true to process the event, and false to drop the event.</returns>
            <remarks>
            The event's type, parameter, and channel can be modified, but not its position.
            It is also possible to apply additional events at the same time via <see cref="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Byte,System.Byte)"/>, but not <see cref="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,System.Byte[],System.Int32)"/>.
            <see cref="F:ManagedBass.Midi.MidiEventType.Note"/>, <see cref="F:ManagedBass.Midi.MidiEventType.NotesOff"/>, and <see cref="F:ManagedBass.Midi.MidiEventType.SoundOff"/> events are ignored while seeking so they will not be received by a filtering function then.
            <see cref="F:ManagedBass.Midi.MidiEventType.Tempo"/> events can be changed while seeking but doing so when seeking in bytes (<see cref="F:ManagedBass.PositionFlags.Bytes"/>) will result in reaching a different position.
            Seeking in ticks (<see cref="F:ManagedBass.PositionFlags.MIDITick"/>) is unaffected by tempo changes.
            The <see cref="F:ManagedBass.Midi.MidiEventType.Speed"/> MIDI_EVENT_SPEED event can be used to modify the tempo without affecting seeking.
            </remarks>
        </member>
        <member name="T:ManagedBass.Midi.FontInitFlags">
            <summary>
            Font Init Flags to be used with <see cref="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)"/>.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.FontInitFlags.MemoryMap">
            <summary>
            Map the file into memory.
            This flag is ignored if the soundfont is packed as the sample data cannot be played directly from a mapping; it needs to be decoded.
            This flag is also ignored if the file is too large to be mapped into memory.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.FontInitFlags.XGDrums">
            <summary>
            Use bank 127 in the soundfont for XG drum kits.
            When an XG drum kit is needed, bank 127 in soundfonts that have this flag set will be checked first, before falling back to bank 128 (the standard SF2 drum kit bank) if it is not available there.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.FontInitFlags.NoFx">
            <summary>
            Ignore the reverb/chorus levels of the presets in the soundfont (only use the levels in the MIDI events).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.FontInitFlags.Unicode">
            <summary>
            Unicode File Names.
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiEventsMode">
            <summary>
            The type of event data to apply, to be used with <see cref="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,System.IntPtr,System.Int32)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventsMode.Struct">
            <summary>
            An array of <see cref="T:ManagedBass.Midi.MidiEvent" /> structures (Default).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventsMode.Raw">
            <summary>
            Raw MIDI event data, as would be sent to a MIDI device. 
            Running status is supported.
            To overcome the 16 channel limit, the event data's channel information can optionally be overridden by adding the new channel number to this parameter, where +1 = the 1st channel.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventsMode.Sync">
            <summary>
            Trigger event syncs
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventsMode.NoRunningStatus">
            <summary>
            Disable running status meaning each event must include a status byte.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventsMode.Cancel">
            <summary>
            Cancel pending events
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventsMode.Time">
            <summary>
            Delta-time info is present
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiEventType">
            <summary>
            The MIDI event type, to be used with <see cref="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Int32)" /> or <see cref="M:ManagedBass.Midi.BassMidi.StreamGetEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType)" /> or <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(ManagedBass.Midi.MidiEvent[],System.Int32,ManagedBass.BassFlags,System.Int32)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.End">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(ManagedBass.Midi.MidiEvent[],System.Int32,ManagedBass.BassFlags,System.Int32)" /> to mark the end of the event array.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.None">
            <summary>
            No event.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Note">
            <summary>
            Press or release a key, or stop without sustain/decay.
            param : LOBYTE = key number (0-127, 60=middle C), HIBYTE = velocity (0=release, 1-127=press, 255=stop).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Program">
            <summary>
            Select the preset/instrument to use. Standard soundfont presets follow the
            General MIDI standard, and generally also include Roland GS variations in other banks (accessible via the <see cref="F:ManagedBass.Midi.MidiEventType.Bank"/> event).
            param : preset number (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChannelPressure">
            <summary>
            Set the channel pressure.
            param : pressure level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Pitch">
            <summary>
            Set the pitch wheel.
            param : pitch wheel position (0-16383, 8192=normal/middle).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.PitchRange">
            <summary>
            Set pitch wheel range (MIDI RPN 0).
            param : range in semitones.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Drums">
            <summary>
            Set the percussion/drums channel switch. 
            The bank and program are reset to 0 when this changes.
            param : use drums? (0=no, 1=yes).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.FineTune">
            <summary>
            Set the fine tuning (MIDI RPN 1).
            param : finetune in cents (0-16383, 0=-100, 8192=normal, 16383=+100).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.CoarseTune">
            <summary>
            Set the coarse tuning (MIDI RPN 2).
            param : finetune in semitones (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.MasterVolume">
            <summary>
            Set the master volume.
            param : volume level (0-16383, 0=silent, 16363=normal/full).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Bank">
            <summary>
            Select the bank to use (MIDI controller 0).
            param : bank number (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Modulation">
            <summary>
            Set the modulation (MIDI controller 1).
            param : modulation level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Volume">
            <summary>
            Set the volume (MIDI controller 7).
            param : volume level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Pan">
            <summary>
            Set the pan position (MIDI controller 10).
            param : pan position (0-128, 0=left, 64=middle, 127=right, 128=random).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Expression">
            <summary>
            Set the expression (MIDI controller 11).
            param : expression level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Sustain">
            <summary>
            Set the sustain switch (MIDI controller 64).
            param : enable sustain? (0-63=no, 64-127=yes).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.SoundOff">
            <summary>
            Stop all sounds (MIDI controller 120).
            param : not used.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Reset">
            <summary>
            Reset controllers (MIDI controller 121), that is modulation=0, expression=127,
            sustain=0, pitch wheel=8192, channel pressure=0.
            param : not used.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.NotesOff">
            <summary>
            Release all keys (MIDI controller 123).
            param : not used.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Portamento">
            <summary>
            Set the portamento switch (MIDI controller 65).
            param : enable portamento? (0-63=no, 64-127=yes).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.PortamentoTime">
            <summary>
            Set the portamento time (MIDI controller 5).
            param : portamento time (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.PortamentoNote">
            <summary>
            Set the portamento start key - the next note starts at this key (MIDI controller 84).
            param : key number (1-127, 60=middle C).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Mode">
            <summary>
            Set poly/mono mode (MIDI controllers 126 and 127).
            param : mode (0=poly, 1=mono).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Reverb">
            <summary>
            Set the reverb send level (MIDI controller 91).
            param : reverb level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Chorus">
            <summary>
            Set the chorus send level (MIDI controller 93).
            param : chorus level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.CutOff">
            <summary>
            Set the low-pass filter cutoff (MIDI controller 74, NRPN 120h).
            param : cutoff level (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Resonance">
            <summary>
            Set the low-pass filter resonance (MIDI controller 71, NRPN 121h).
            param : resonance level (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Release">
            <summary>
            Set the release time (MIDI controller 72, NRPN 166h).
            param : release time (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Attack">
            <summary>
            Set the attack time (MIDI controller 73, NRPN 163h).
            param : attack time (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Decay">
            <summary>
            Set the decay time (MIDI controller 75, NRPN 164h)
            param : decay time (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ReverbMacro">
            <summary>
            To be defined.
            param : to be defined.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChorusMacro">
            <summary>
            To be defined.
            param : to be defined.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ReverbTime">
            <summary>
            Set the reverb time.
            param : reverb time in milliseconds.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ReverbDelay">
            <summary>
            Set the reverb delay.
            param : reverb delay in millisecond 10ths.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ReverbLowPassCutOff">
            <summary>
            Set the reverb low-pass cutoff.
            param : reverb low-pass cutoff in hertz (0=off).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ReverbHighPassCutOff">
            <summary>
            Set the reverb high-pass cutoff.
            param : reverb high-pass cutoff in hertz (0=off).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ReverbLevel">
            <summary>
            Set the reverb level.
            param : reverb level (0=off, 100=0dB, 200=+6dB).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChorusDelay">
            <summary>
            Set the chorus delay.
            param : chorus delay in millisecond 10ths.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChorusDepth">
            <summary>
            Set the chorus depth.
            param : chorus depth in millisecond 10ths.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChorusRate">
            <summary>
            Set the chorus rate.
            param : chorus rate in hertz 100ths.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChorusFeedback">
            <summary>
            Set the chorus feedback level.
            param : chorus feedback level (0=-100%, 100=off, 200=+100%).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChorusLevel">
            <summary>
            Set the chorus level.
            param : chorus level (0=off, 100=0dB, 200=+6dB).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChorusReverb">
            <summary>
            Set the chorus send to reverb level.
            param : chorus send to reverb level (0=off, 100=0dB, 200=+6dB).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.UserFX">
            <summary>
            Set the user effect send level (MIDI controller 94).
            This will have no audible effect unless custom processing is applied to the user effect mix via <see cref="M:ManagedBass.Midi.BassMidi.StreamGetChannel(System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.UserFXLevel">
            <summary>
            Set the user effect level.
            param : user effect level (0=off, 100=0dB, 200=+6dB).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.UserFXReverb">
            <summary>
            Set the user effect send to reverb level.
            param : user effect send to reverb level (0=off, 100=0dB, 200=+6dB).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.UserFXChorus">
            <summary>
            Set the user effect send to chorus level.
            param : user effect send to chorus level (0=off, 100=0dB, 200=+6dB).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumFineTune">
            <summary>
            Set the fine tuning of a drum key (MIDI NRPN 19knh).
            param : LOBYTE = key number (0-127), HIBYTE = finetune in cents (0-127, 0=-100, 64=normal, 127=+100).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumCoarseTune">
            <summary>
            Set the coarse tuning of a drum key (MIDI NRPN 18knh).
            param : LOBYTE = key number (0-127), HIBYTE = finetune in semitones (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumPan">
            <summary>
            Set the pan position of a drum key (MIDI NRPN 1Cknh).
            param : LOBYTE = key number (0-127), HIBYTE = pan position (0-127, 0=random, 64=middle).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumReverb">
            <summary>
            Set the reverb send level of a drum key (MIDI NRPN 1Dknh).
            param : LOBYTE = key number (0-127), HIBYTE = reverb level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumChorus">
            <summary>
            Set the chorus send level of a drum key (MIDI NRPN 1Eknh).
            param : LOBYTE = key number (0-127), HIBYTE = chorus level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumCutOff">
            <summary>
            Set the low-pass filter cutoff of a drum key (MIDI NRPN 14knh).
            param : LOBYTE = key number (0-127), HIBYTE = cutoff level (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumResonance">
            <summary>
            Set the low-pass filter resonance of a drum key (MIDI NRPN 15knh).
            param : LOBYTE = key number (0-127), HIBYTE = resonance level (0-127, 0=-64, 64=normal, 127=+63).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumLevel">
            <summary>
            Set the drum level NRPN of a drum key (MIDI NRPN 16knh).
            param : LOBYTE = key number (0-127), HIBYTE = level (0-127, 127=full/normal).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.DrumUserFX">
            <summary>
            Set the user effect send level of a drum key (MIDI NRPN 1Fknh)
            param : LOBYTE = key number (0-127), HIBYTE = user effect level (0-127, 127=normal/full).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Soft">
            <summary>
            Set the soft pedal/switch (MIDI controller 67).
            param : soft is on? (0-63=no, 64-127=yes).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.System">
            <summary>
            Set the system mode, resetting everything to the system's defaults.
            <see cref="F:ManagedBass.Midi.MidiSystem.Default"/> is identical to <see cref="F:ManagedBass.Midi.MidiSystem.GS"/>, except that channel 10 is melodic if there are not 16 channels.
            This does not reset things in any additional channels allocated to a MIDI file stream via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels"/> attribute,
            while <see cref="F:ManagedBass.Midi.MidiEventType.SystemEx"/> does.
            param : system mode (see <see cref="T:ManagedBass.Midi.MidiSystem"/>).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Tempo">
            <summary>
            Set the tempo (MIDI meta event 81).
            Changing the tempo affects the stream Length, and the <see cref="M:ManagedBass.Bass.ChannelGetLength(System.Int32,ManagedBass.PositionFlags)"/> value will no longer be valid.
            param : tempo in microseconds per quarter note.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ScaleTuning">
            <summary>
            Set the tuning of a note in every octave.
            param : LOWORD = tuning change in cents (0-16383, 0=-100, 8192=normal, 16383=+100), HIWORD = note (0-11, 0=C).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Control">
            <summary>
            Control event.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChangePresetVibrato">
            <summary>
            Change Preset Vibrato.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChangePresetPitch">
            <summary>
            Change Preset Pitch.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChangePresetFilter">
            <summary>
            Change Preset Filter.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ChangePresetVolume">
            <summary>
            Change Preset Volume.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ModRange">
            <summary>
            Mod Range.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.BankLSB">
            <summary>
            Bank LSB.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.KeyPressure">
            <summary>
            Set a key's pressure/aftertouch.
            param : LOBYTE = key number (0-127), HIBYTE = pressure level (0-127).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.KeyPressureVibrato">
            <summary>
            Set the maximum effect of key pressure/aftertouch on vibrato depth.
            param : vibrato depth effect in cents (0=none, 128=100, 256=200, etc).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.KeyPressurePitch">
            <summary>
            Set the maximum effect of key pressure/aftertouch on pitch.
            param : pitch effect in semitones (0=-24, 24=none, 48=+24).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.KeyPressureFilter">
            <summary>
            Set the maximum effect of key pressure/aftertouch on filter cutoff.
            param : filter cutoff effect in cents (0=-9600, 9600=none, 19200=+9600).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.KeyPressureVolume">
            <summary>
            Set the maximum effect of key pressure/aftertouch on volume.
            param : volume effect percentage (0=-100, 100=none, 200=+100).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Sostenuto">
            <summary>
            Set the sostenuto pedal/switch (MIDI controller 66).
            param : sostenuto is on? (0-63=no, 64-127=yes).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ModPitch">
            <summary>
            Set the maximum effect of modulation (MIDI controller 1) on pitch.
            param : pitch effect in semitones (0=-24, 24=none, 48=+24).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ModFilter">
            <summary>
            Set the maximum effect of modulation (MIDI controller 1) on filter cutoff.
            param : filter cutoff effect in cents (0=-9600, 9600=none, 19200=+9600).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.ModVolume">
            <summary>
            Set the maximum effect of modulation (MIDI controller 1) on volume.
            param : volume effect percentage (0=-100, 100=none, 200=+100).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Level">
            <summary>
            Set the level.
            param : the level (0=silent, 100=0dB, 200=+6dB).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Transpose">
            <summary>
            Transpose all notes. 
            Changes take effect from the next note played, and affect melodic channels only (not drum channels).
            param : transposition amount in semitones (0=-100, 100=normal, 200=+100).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.SystemEx">
            <summary>
            Set the system mode, resetting everything to the system's defaults. 
            <see cref="F:ManagedBass.Midi.MidiSystem.Default"/> is identical to <see cref="F:ManagedBass.Midi.MidiSystem.GS"/>, except that channel 10 is melodic if there are not 16 channels.
            <see cref="F:ManagedBass.Midi.MidiEventType.System"/> does not reset things in any additional channels allocated to a MIDI file stream 
            via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels"/> attribute, while this does.
            param : system mode (see <see cref="T:ManagedBass.Midi.MidiSystem"/>).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Speed">
            <summary>
            Set a tempo modification.
            Changing the tempo affects the stream length, and the <see cref="M:ManagedBass.Bass.ChannelGetLength(System.Int32,ManagedBass.PositionFlags)"/> byte value will no longer be valid.
            The modification does not affect seeking.
            param : speed in 100ths of a percent (100=1%/min, 10000=100%/normal, 20000=200%).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.EndTrack">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(ManagedBass.Midi.MidiEvent[],System.Int32,ManagedBass.BassFlags,System.Int32)"/> to mark the end of a track (the next event will be in a new track).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Notes">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.StreamGetEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType)"/> to check the total no of keys pressed in the specified channel.
            If a key is simultaneously pressed multiple times, it will still only be counted once.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.Voices">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.StreamGetEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType)"/> to check the total no of active voices.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEventType.NoRunningStatus">
            <summary>
            Flag: no running status.
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiMarkerType">
            <summary>
            The Marker type, to be used with <see cref="M:ManagedBass.Midi.BassMidi.StreamGetMark(System.Int32,ManagedBass.Midi.MidiMarkerType,System.Int32,ManagedBass.Midi.MidiMarker@)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.Marker">
            <summary>
            Marker events (MIDI meta event 6).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.CuePoint">
            <summary>
            Cue events (MIDI meta event 7).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.Lyric">
            <summary>
            Lyric events (MIDI meta event 5).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.Text">
            <summary>
            Text events (MIDI meta event 1).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.TimeSignature">
            <summary>
            Time signature event (MIDI meta event 88).
            The time signature events are given in the form of "numerator/denominator metronome-pulse 32nd-notes-per-MIDI-quarter-note", eg. "4/4 24 8".
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.KeySignature">
            <summary>
            Key signature events (MIDI meta event 89).
            That gives the key signature (in <see cref="P:ManagedBass.Midi.MidiMarker.Text"/>) in the form of "a b", where "a" is the number of sharps (if positive) or flats (if negative) and "b" signifies major (if 0) or minor (if 1).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.Copyright">
            <summary>
            Copyright notice (MIDI meta event 2).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.TrackName">
            <summary>
            Track name events (MIDI meta event 3).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.InstrumentName">
            <summary>
            Instrument name events (MIDI meta event 4). 
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiMarkerType.Tick">
            <summary>
            FLAG: get position in ticks instead of bytes
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiSystem">
            <summary>
            System mode parameter, to be used with <see cref="F:ManagedBass.Midi.MidiEventType.System" />, <see cref="F:ManagedBass.Midi.MidiEventType.SystemEx" />.
            </summary>
            <remarks>
            <see cref="F:ManagedBass.Midi.MidiSystem.Default"/> is identical to <see cref="F:ManagedBass.Midi.MidiSystem.GS"/>, except that channel 10 is melodic if there are not 16 channels.
            </remarks>
        </member>
        <member name="F:ManagedBass.Midi.MidiSystem.Default">
            <summary>
            System default. 
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiSystem.GM1">
            <summary>
            General MIDI Level 1.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiSystem.GM2">
            <summary>
            General MIDI Level 2.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiSystem.XG">
            <summary>
            XG-Format (Yamaha).
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiSystem.GS">
            <summary>
            GS-Format (Roland).
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiInProcedure">
            <summary>
            User defined callback delegate to receive MIDI data (to be used with <see cref="!:BassMidi.InInit" />).
            </summary>
            <param name="Device">The MIDI input device that the data is from.</param>
            <param name="Time">Timestamp, in seconds since <see cref="!:BassMidi.InStart" /> was called.</param>
            <param name="Buffer">Pointer to the MIDI data.</param>
            <param name="Length">The amount of data in bytes.</param>
            <param name="User">The user instance data given when <see cref="!:BassMidi.InInit" /> was called.</param>
        </member>
        <member name="T:ManagedBass.Midi.BassMidi">
            <summary>
            BassMidi is a BASS addon enabling the playback of MIDI files and real-time events, using SF2 soundfonts to provide the sounds.
            </summary>
            <remarks>
            Supports: .midi, .mid, .rmi, .kar
            </remarks>
            <summary>
            Wraps BassMidi: bassmidi.dll
            
            <para>Supports: .midi, .mid, .rmi, .kar</para>
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.BassMidi.ChorusChannel">
            <summary>
            Chorus Mix Channel.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.BassMidi.ReverbChannel">
            <summary>
            Reverb Mix Channel.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.BassMidi.UserFXChannel">
            <summary>
            User FX Channel.
            </summary>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.CreateStream(System.Int32,ManagedBass.BassFlags,System.Int32)">
            <summary>
            Creates a sample stream to render real-time MIDI events.
            </summary>
            <param name="Channels">The number of MIDI channels: 1 (min) - 128 (max).</param>
            <param name="Flags">A combination of <see cref="T:ManagedBass.BassFlags"/>.</param>
            <param name="Frequency">Sample rate (in Hz) to render/play the MIDI at (0 = the rate specified in the <see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)" /> call; 1 = the device's current output rate or the <see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)"/> rate if that is not available).</param>
            <returns>If successful, the new stream's handle is returned, else 0 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            This function creates a stream solely for real-time MIDI events.
            As it's not based on any file, the stream has no predetermined length and is never-ending.
            Seeking isn't possible, but it is possible to reset everything, including playback buffer, by calling <see cref="M:ManagedBass.Bass.ChannelPlay(System.Int32,System.Boolean)" /> (Restart = <see langword="true" />) or <see cref="M:ManagedBass.Bass.ChannelSetPosition(System.Int32,System.Int64,ManagedBass.PositionFlags)" /> (Position = 0).
            </para>
            <para>
            MIDI events are applied using the <see cref="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Int32)" /> function.
            If the stream is being played (it's not a decoding channel), then there will be some delay in the effect of the events being heard. 
            This latency can be reduced by making use of the <see cref="P:ManagedBass.Bass.PlaybackBufferLength" /> and <see cref="P:ManagedBass.Bass.UpdatePeriod" /> options.
            </para>
            <para>
            If a stream has 16 MIDI channels, then channel 10 defaults to percussion/drums and the rest melodic, otherwise they are all melodic.
            That can be changed using <see cref="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Int32)" /> and <see cref="F:ManagedBass.Midi.MidiEventType.Drums"/>.
            </para>
            <para>
            Soundfonts provide the sounds that are used to render a MIDI stream.
            A default soundfont configuration is applied initially to the new MIDI stream, which can subsequently be overriden using <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)" />.
            </para>
            <para>To play a MIDI file, use <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(System.String,System.Int64,System.Int64,ManagedBass.BassFlags,System.Int32)" />.</para>
            <para><b>Platform-specific</b></para>
            <para>
            On Android and iOS, sinc interpolation requires a NEON-supporting CPU; the <see cref="F:ManagedBass.BassFlags.SincInterpolation"/> flag will otherwise be ignored.
            Sinc interpolation is not available on Windows CE.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">Only decoding channels (<see cref="F:ManagedBass.BassFlags.Decode"/>) are allowed when using the <see cref="F:ManagedBass.Bass.NoSoundDevice"/>. The <see cref="F:ManagedBass.BassFlags.AutoFree"/> flag is also unavailable to decoding channels.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Channels" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">The sample format is not supported by the device/drivers. If the stream is more than stereo or the <see cref="F:ManagedBass.BassFlags.Float"/> flag is used, it could be that they are not supported.</exception>
            <exception cref="F:ManagedBass.Errors.Speaker">The specified Speaker Flags are invalid. The device/drivers do not support them, they are attempting to assign a stereo stream to a mono speaker or 3D functionality is enabled.</exception>
            <exception cref="F:ManagedBass.Errors.Memory">There is insufficient memory.</exception>
            <exception cref="F:ManagedBass.Errors.No3D">Could not initialize 3D support.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.CreateStream(ManagedBass.Midi.MidiEvent[],System.Int32,ManagedBass.BassFlags,System.Int32)">
            <summary>
            Creates a sample stream from a sequence of MIDI events.
            </summary>
            <param name="Events">An array of <see cref="T:ManagedBass.Midi.MidiEvent" />s containing the event sequence to play (the array should be terminated with a <see cref="F:ManagedBass.Midi.MidiEventType.End"/> event).</param>
            <param name="PulsesPerQuarterNote">The number of pulses per quarter note (or ticks per beat) value of the MIDI stream to create.</param>
            <param name="Flags">A combination of <see cref="T:ManagedBass.BassFlags"/>.</param>
            <param name="Frequency">Sample rate to render/play the MIDI at (0 = the rate specified in the <see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)" /> call; 1 = the device's current output rate (or the <see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)"/> BASS_Init rate if that is not available).</param>
            <returns>If successful, the new stream's handle is returned, else 0 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            This function creates a 16 channel MIDI stream to play a predefined sequence of MIDI events.
            Any of the standard MIDI events can be used, but <see cref="F:ManagedBass.Midi.MidiEventType.Level"/>, <see cref="F:ManagedBass.Midi.MidiEventType.Transpose"/>, and <see cref="F:ManagedBass.Midi.MidiEventType.SystemEx"/> events are not available and will be ignored.
            The sequence should end with a <see cref="F:ManagedBass.Midi.MidiEventType.End"/> event.
            Multiple tracks are possible via the <see cref="F:ManagedBass.Midi.MidiEventType.EndTrack"/> event, which signals the end of a track; the next event will be in a new track.
            Any <see cref="F:ManagedBass.Midi.MidiEventType.Tempo"/> events should be in the first track.
            </para>
            <para>The event sequence is copied, so the events array does not need to persist beyond the function call.</para>
            <para>
            Soundfonts provide the sounds that are used to render a MIDI stream.
            A default soundfont configuration is applied initially to the new MIDI stream, which can subsequently be overridden using <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)" />.
            </para>
            <para><b>Platform-specific</b></para>
            <para>
            On Android and iOS, sinc interpolation requires a NEON-supporting CPU; the <see cref="F:ManagedBass.BassFlags.SincInterpolation"/> flag will otherwise be ignored.
            Sinc interpolation is not available on Windows CE.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)" /> has not been successfully called.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">Only decoding channels (<see cref="F:ManagedBass.BassFlags.Decode"/>) are allowed when using the <see cref="F:ManagedBass.Bass.NoSoundDevice"/>. The <see cref="F:ManagedBass.BassFlags.AutoFree"/> flag is also unavailable to decoding channels.</exception>
            <exception cref="F:ManagedBass.Errors.NoInternet">No internet connection could be opened. Can be caused by a bad <see cref="P:ManagedBass.Bass.NetProxy"/> setting.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Events" /> are not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Timeout">The server did not respond to the request within the timeout period, as set with the <see cref="P:ManagedBass.Bass.NetTimeOut"/> config option.</exception>
            <exception cref="F:ManagedBass.Errors.FileOpen">The file could not be opened.</exception>
            <exception cref="F:ManagedBass.Errors.FileFormat">The file's format is not recognised/supported.</exception>
            <exception cref="F:ManagedBass.Errors.SampleFormat">The sample format is not supported by the device/drivers. If the stream is more than stereo or the <see cref="F:ManagedBass.BassFlags.Float"/> flag is used, it could be that they are not supported.</exception>
            <exception cref="F:ManagedBass.Errors.Speaker">The specified Speaker Flags are invalid. The device/drivers do not support them, they are attempting to assign a stereo stream to a mono speaker or 3D functionality is enabled.</exception>
            <exception cref="F:ManagedBass.Errors.Memory">There is insufficient memory.</exception>
            <exception cref="F:ManagedBass.Errors.No3D">Could not initialize 3D support.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Int32)">
            <summary>
            Applies an event to a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to apply the event to (as returned by <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(System.Int32,ManagedBass.BassFlags,System.Int32)" />).</param>
            <param name="Channel">The MIDI channel to apply the event to... 0 = channel 1.</param>
            <param name="Event">The event to apply (see <see cref="T:ManagedBass.Midi.MidiEventType" /> for details).</param>
            <param name="Parameter">The event parameter (see <see cref="T:ManagedBass.Midi.MidiEventType" /> for details).</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>Apart from the "global" events, all events apply only to the specified MIDI channel.</para>
            <para>
            Except for the "non-MIDI" events, events applied to a MIDI file stream can subsequently be overridden by events in the file itself, and will also be overridden when seeking or looping.
            That can be avoided by using additional channels, allocated via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels"/> attribute.
            </para>
            <para>
            Event syncs (see <see cref="T:ManagedBass.SyncFlags" />) are not triggered by this function.
            If sync triggering is wanted, <see cref="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,ManagedBass.Midi.MidiEvent[],System.Int32)" /> can be used instead.
            </para>
            <para>
            If the MIDI stream is being played (it's not a decoding channel), then there will be some delay in the effect of the event being heard. 
            This latency can be reduced by making use of the <see cref="P:ManagedBass.Bass.PlaybackBufferLength"/> and <see cref="P:ManagedBass.Bass.UpdatePeriod"/> config options when creating the stream.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">One of the other parameters is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Byte,System.Byte)">
            <summary>
            Applies an event to a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to apply the event to (as returned by <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(System.Int32,ManagedBass.BassFlags,System.Int32)" />).</param>
            <param name="Channel">The MIDI channel to apply the event to... 0 = channel 1.</param>
            <param name="Event">The event to apply (see <see cref="T:ManagedBass.Midi.MidiEventType" /> for details).</param>
            <param name="LowParameter">The event parameter (LOBYTE), (see <see cref="T:ManagedBass.Midi.MidiEventType" /> for details).</param>
            <param name="HighParameter">The event parameter (HIBYTE), (see <see cref="T:ManagedBass.Midi.MidiEventType" /> for details).</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>Apart from the "global" events, all events apply only to the specified MIDI channel.</para>
            <para>
            Except for the "non-MIDI" events, events applied to a MIDI file stream can subsequently be overridden by events in the file itself, and will also be overridden when seeking or looping.
            That can be avoided by using additional channels, allocated via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels"/> attribute.
            </para>
            <para>
            Event syncs (see <see cref="T:ManagedBass.SyncFlags" />) are not triggered by this function.
            If sync triggering is wanted, <see cref="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,ManagedBass.Midi.MidiEvent[],System.Int32)" /> can be used instead.
            </para>
            <para>
            If the MIDI stream is being played (it's not a decoding channel), then there will be some delay in the effect of the event being heard. 
            This latency can be reduced by making use of the <see cref="P:ManagedBass.Bass.PlaybackBufferLength"/> and <see cref="P:ManagedBass.Bass.UpdatePeriod"/> config options when creating the stream.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">One of the other parameters is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,System.IntPtr,System.Int32)">
            <summary>
            Applies any number of events to a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to apply the events to.</param>
            <param name="Mode">Midi Events Mode.</param>
            <param name="Events">The event data (raw data - byte[]).</param>
            <param name="Length">Length of Events data according to <paramref name="Mode"/>.</param>
            <returns>If successful, the number of events processed is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            Events applied to a MIDI file stream can subsequently be overridden by events in the file itself, and will also be overridden when seeking or looping.
            That can be avoided by using additional channels, allocated via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels" /> attribute.
            </para>
            <para>
            If the MIDI stream is being played (it's not a decoding channel), then there will be some delay in the effect of the event being heard. 
            This latency can be reduced by making use of the <see cref="P:ManagedBass.Bass.PlaybackBufferLength"/> and <see cref="P:ManagedBass.Bass.UpdatePeriod"/> config options when creating the stream.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle"/> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Mode"/> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,ManagedBass.Midi.MidiEvent[],System.Int32)">
            <summary>
            Applies any number of events to a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to apply the events to.</param>
            <param name="Mode">Midi Events Mode.</param>
            <param name="Events">The event data (an array of <see cref="T:ManagedBass.Midi.MidiEvent" /> structures).</param>
            <param name="Length">No of <see cref="T:ManagedBass.Midi.MidiEvent"/> items... 0 = No of items in <paramref name="Events"/> array.</param>
            <returns>If successful, the number of events processed is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            Events applied to a MIDI file stream can subsequently be overridden by events in the file itself, and will also be overridden when seeking or looping.
            That can be avoided by using additional channels, allocated via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels" /> attribute.
            </para>
            <para>
            If the MIDI stream is being played (it's not a decoding channel), then there will be some delay in the effect of the event being heard. 
            This latency can be reduced by making use of the <see cref="P:ManagedBass.Bass.PlaybackBufferLength"/> and <see cref="P:ManagedBass.Bass.UpdatePeriod"/> config options when creating the stream.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle"/> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Mode"/> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,System.Byte[],System.Int32)">
            <summary>
            Applies any number of events to a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to apply the events to.</param>
            <param name="Mode">Midi Events Mode.</param>
            <param name="Raw">The event data (raw data - byte[]).</param>
            <param name="Length">No of <see cref="T:System.Byte"/>s... 0 = No of items in <paramref name="Raw"/> array.</param>
            <returns>If successful, the number of events processed is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            Events applied to a MIDI file stream can subsequently be overridden by events in the file itself, and will also be overridden when seeking or looping.
            That can be avoided by using additional channels, allocated via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels" /> attribute.
            </para>
            <para>
            If the MIDI stream is being played (it's not a decoding channel), then there will be some delay in the effect of the event being heard. 
            This latency can be reduced by making use of the <see cref="P:ManagedBass.Bass.PlaybackBufferLength"/> and <see cref="P:ManagedBass.Bass.UpdatePeriod"/> config options when creating the stream.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle"/> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Mode"/> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Applies any number of events to a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to apply the events to.</param>
            <param name="Mode">Midi Events Mode.</param>
            <param name="Channel">To overcome the 16 channel limit, the event data's channel information can optionally be overridden by adding the new channel number to this parameter, where 1 = the 1st channel - else leave to 0.</param>
            <param name="Raw">The event data (raw data - byte[]).</param>
            <param name="Length">No of <see cref="T:System.Byte"/>s... 0 = No of items in <paramref name="Raw"/> array.</param>
            <returns>If successful, the number of events processed is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            Events applied to a MIDI file stream can subsequently be overridden by events in the file itself, and will also be overridden when seeking or looping.
            That can be avoided by using additional channels, allocated via the <see cref="F:ManagedBass.ChannelAttribute.MidiChannels" /> attribute.
            </para>
            <para>
            If the MIDI stream is being played (it's not a decoding channel), then there will be some delay in the effect of the event being heard. 
            This latency can be reduced by making use of the <see cref="P:ManagedBass.Bass.PlaybackBufferLength"/> and <see cref="P:ManagedBass.Bass.UpdatePeriod"/> config options when creating the stream.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle"/> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Mode"/> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetChannel(System.Int32,System.Int32)">
            <summary>
            Gets a HSTREAM handle for a MIDI channel (e.g. to set DSP/FX on individual MIDI channels).
            </summary>
            <param name="Handle">The midi stream to get a channel from.</param>
            <param name="Channel">The MIDI channel... 0 = channel 1. Or one of the following special channels:
            <para><see cref="F:ManagedBass.Midi.BassMidi.ChorusChannel"/> = Chorus mix channel. The default chorus processing is replaced by the stream's processing.</para>
            <para><see cref="F:ManagedBass.Midi.BassMidi.ReverbChannel"/> = Reverb mix channel. The default reverb processing is replaced by the stream's processing.</para>
            <para><see cref="F:ManagedBass.Midi.BassMidi.UserFXChannel"/> = User effect mix channel.</para>
            </param>
            <returns>If successful, the channel handle is returned, else 0 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            By default, MIDI channels do not have streams assigned to them;
            a MIDI channel only gets a stream when this function is called, which it then keeps until the MIDI stream is freed. 
            MIDI channel streams can also be freed before then via <see cref="M:ManagedBass.Bass.StreamFree(System.Int32)" />.
            Each MIDI channel stream increases the CPU usage slightly, even if there are no DSP/FX set on them, so for optimal performance they should not be activated when unnecessary.
            </para>
            <para>
            The MIDI channel streams have a different path to the final mix than the BASSMIDI reverb/chorus processing, which means that the reverb/chorus will not be present in the data received by any DSP/FX set on the streams and nor will the reverb/chorus be applied to the DSP/FX output; 
            the reverb/chorus processing will use the channel's original data.
            </para>
            <para>
            The MIDI channel streams can only be used to set DSP/FX on the channels. 
            They cannot be used with <see cref="M:ManagedBass.Bass.ChannelGetData(System.Int32,System.IntPtr,System.Int32)" /> or <see cref="M:ManagedBass.Bass.ChannelGetLevel(System.Int32)" /> to visualise the channels, for example, 
            but that could be achieved via a DSP function instead.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable"><paramref name="Channel" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType)">
            <summary>
            Retrieves the current value of an event in a MIDI stream channel.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the event from (as returned by <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(System.Int32,ManagedBass.BassFlags,System.Int32)"/>.</param>
            <param name="Channel">The MIDI channel to get the event value from... 0 = channel 1.</param>
            <param name="Event">
            The event value to retrieve.
            With the drum key events (<see cref="F:ManagedBass.Midi.MidiEventType.DrumCutOff"/>/etc) and the <see cref="F:ManagedBass.Midi.MidiEventType.Note"/> and <see cref="F:ManagedBass.Midi.MidiEventType.ScaleTuning"/> events, the HIWORD can be used to specify which key/note to get the value from.</param>
            <returns>The event parameter if successful - else -1 (use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code).</returns>
            <remarks>SYNCs can be used to be informed of when event values change.</remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">One of the other parameters is invalid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetEvents(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,ManagedBass.Midi.MidiEvent[])">
            <summary>
            Retrieves the events in a MIDI file stream.
            </summary>
            <param name="Handle">The MIDI stream to get the events from.</param>
            <param name="Track">The track to get the events from... 0 = 1st track.</param>
            <param name="Filter">The type of event to retrieve (use <see cref="F:ManagedBass.Midi.MidiEventType.None"/> to retrieve all events).</param>
            <param name="Events">An array of <see cref="T:ManagedBass.Midi.MidiEvent" />s to retrieve the events (<see langword="null" /> = get the number of events without getting the events themselves).</param>
            <returns>If successful, the number of events is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            This function should first be called with <paramref name="Events" /> = <see langword="null" /> to get the number of events, before allocating an array of the required size and retrieving the events.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The stream is for real-time events only, so does not have an event sequence.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Track" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetEvents(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType)">
            <summary>
            Retrieves the events in a MIDI file stream.
            </summary>
            <param name="Handle">The MIDI stream to get the events from.</param>
            <param name="Track">The track to get the events from... 0 = 1st track.</param>
            <param name="Filter">The type of event to retrieve (use <see cref="F:ManagedBass.Midi.MidiEventType.None"/> to retrieve all events).</param>
            <returns>An array of <see cref="T:ManagedBass.Midi.MidiEvent" /> configuration entries on success, <see langword="null" /> on error.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The stream is for real-time events only, so does not have an event sequence.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Track" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetEvents(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,ManagedBass.Midi.MidiEvent[],System.Int32,System.Int32)">
            <summary>
            Retrieves a portion of the events in a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to get the events from.</param>
            <param name="Track">The track to get the events from... 0 = 1st track, -1 = all tracks.</param>
            <param name="Filter">The type of event to retrieve (use <see cref="F:ManagedBass.Midi.MidiEventType.None"/> to retrieve all events).</param>
            <param name="Events">An array of <see cref="T:ManagedBass.Midi.MidiEvent" />s to retrieve the events (<see langword="null" /> = get the number of events without getting the events themselves).</param>
            <param name="Start">The first event to retrieve.</param>
            <param name="Count">The maximum number of events to retrieve.</param>
            <returns>If successful, the number of events is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            This function should first be called with <paramref name="Events" /> = <see langword="null" /> to get the number of events, before allocating an array of the required size and retrieving the events.
            This function is identical to <see cref="M:ManagedBass.Midi.BassMidi.StreamGetEvents(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,ManagedBass.Midi.MidiEvent[])"/> except that it can retrieve a portion of the events instead of all of them.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The stream is for real-time events only, so does not have an event sequence.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Track" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetFonts(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Retrieves the soundfont configuration of a MIDI stream, or the default soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the soundfont configuration of... 0 = get default soundfont configuration.</param>
            <param name="Fonts">An <see cref="T:System.IntPtr"/> to retrieve the soundfont configuration.</param>
            <param name="Count">The maximum number of elements to retrieve. This and fonts can be 0, to get the number of elements in the soundfont configuration.</param>
            <returns>If successful, the number of soundfonts in the configuration (which can be higher than count) is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>When a soundfont matching the MIDI file is loaded, it will be the first element in the returned configuration.</remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)">
            <summary>
            Retrieves the soundfont configuration of a MIDI stream, or the default soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the soundfont configuration of... 0 = get default soundfont configuration.</param>
            <param name="Fonts">An array to retrieve the soundfont configuration.</param>
            <param name="Count">The maximum number of elements to retrieve in the fonts array. This and fonts can be 0, to get the number of elements in the soundfont configuration.</param>
            <returns>If successful, the number of soundfonts in the configuration (which can be higher than count) is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>When a soundfont matching the MIDI file is loaded, it will be the first element in the returned configuration.</remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetFonts(System.Int32)">
            <summary>
            Retrieves the soundfont configuration of a MIDI stream, or the default soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the soundfont configuration of... 0 = get default soundfont configuration.</param>
            <returns>An array of <see cref="T:ManagedBass.Midi.MidiFont" /> configuration entries if successfull - or <see langword="null" /> on error.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetFonts(System.Int32,ManagedBass.Midi.MidiFontEx[],System.Int32)">
            <summary>
            Retrieves the soundfont configuration of a MIDI stream, or the default soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the soundfont configuration of... 0 = get default soundfont configuration.</param>
            <param name="Fonts">An array to retrieve the soundfont configuration.</param>
            <param name="Count">The maximum number of elements to retrieve in the fonts array. This and fonts can be 0, to get the number of elements in the soundfont configuration.</param>
            <returns>If successful, the number of soundfonts in the configuration (which can be higher than count) is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>When a soundfont matching the MIDI file is loaded, it will be the first element in the returned configuration.</remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetFontsEx(System.Int32)">
            <summary>
            Retrieves the soundfont configuration of a MIDI stream, or the default soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the soundfont configuration of... 0 = get default soundfont configuration.</param>
            <returns>An array of <see cref="T:ManagedBass.Midi.MidiFontEx" /> configuration entries if successfull - or <see langword="null" /> on error.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetFontsCount(System.Int32)">
            <summary>
            Retrieves the number of elements in the soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the soundfont configuration of... 0 = get default soundfont configuration.</param>
            <returns>If successful, the number of soundfonts in the configuration is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetMark(System.Int32,ManagedBass.Midi.MidiMarkerType,System.Int32,ManagedBass.Midi.MidiMarker@)">
            <summary>
            Retrieves a marker from a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the marker from.</param>
            <param name="Type">The type of marker to retrieve.</param>
            <param name="Index">The marker to retrieve... 0 = the first.</param>
            <param name="Mark">The <see cref="T:ManagedBass.Midi.MidiMarker" /> structure to receive the marker details into.</param>
            <returns><see langword="true" /> on success, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            The markers are ordered chronologically.
            <para>Syncs can be used to be informed of when markers are encountered during playback.</para>
            <para>
            If a lyric marker text begins with a '/' (slash) character, that means a new line should be started.
            If the text begins with a '\' (backslash) character, the display should be cleared. 
            Lyrics can sometimes be found in <see cref="F:ManagedBass.Midi.MidiMarkerType.Text"/> instead of <see cref="F:ManagedBass.Midi.MidiMarkerType.Lyric"/> markers.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Type"><paramref name="Type" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Index" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetMark(System.Int32,ManagedBass.Midi.MidiMarkerType,System.Int32)">
            <summary>
            Retrieves a marker from a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the marker from.</param>
            <param name="Type">The type of marker to retrieve.</param>
            <param name="Index">The marker to retrieve... 0 = the first.</param>
            <returns>On success, an instance of the <see cref="T:ManagedBass.Midi.MidiMarker" /> structure is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            The markers are ordered chronologically.
            <para>Syncs can be used to be informed of when markers are encountered during playback.</para>
            <para>
            If a lyric marker text begins with a '/' (slash) character, that means a new line should be started.
            If the text begins with a '\' (backslash) character, the display should be cleared. 
            Lyrics can sometimes be found in <see cref="F:ManagedBass.Midi.MidiMarkerType.Text"/> instead of <see cref="F:ManagedBass.Midi.MidiMarkerType.Lyric"/> markers.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Type"><paramref name="Type" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Index" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetMarks(System.Int32,System.Int32,ManagedBass.Midi.MidiMarkerType,ManagedBass.Midi.MidiMarker[])">
            <summary>
            Retrieves the markers in a MIDI file stream.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the markers from.</param>
            <param name="Track">The track to get the markers from... 0 = 1st track, -1 = all tracks.</param>
            <param name="Type">The type of marker to retrieve.</param>
            <param name="Marks">An array of <see cref="T:ManagedBass.Midi.MidiMarker"/>s to receive the data into. Can be null to get the no of markers.</param>
            <returns>No of markers in the array on success, -1 on failure. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>The markers are ordered chronologically, and by track number (lowest first) if multiple markers have the same position.</para>
            <para>SYNCs can be used to be informed of when markers are encountered during playback.</para>
            <para>
            If a lyric marker text begins with a / (slash) character, that means a new line should be started.
            If the text begins with a \ (backslash) character, the display should be cleared.
            Lyrics can sometimes be found in <see cref="F:ManagedBass.Midi.MidiMarkerType.Text"/> instead of <see cref="F:ManagedBass.Midi.MidiMarkerType.Lyric"/> markers.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Type"><paramref name="Type" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Track" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetMarks(System.Int32,System.Int32,ManagedBass.Midi.MidiMarkerType)">
            <summary>
            Retrieves the markers in a MIDI file stream.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the markers from.</param>
            <param name="Track">The track to get the markers from... 0 = 1st track, -1 = all tracks.</param>
            <param name="Type">The type of marker to retrieve.</param>
            <returns>On success, an array of <see cref="T:ManagedBass.Midi.MidiMarker" /> instances is returned, else <see langword="null" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>The markers are ordered chronologically, and by track number (lowest first) if multiple markers have the same position.</para>
            <para>SYNCs can be used to be informed of when markers are encountered during playback.</para>
            <para>
            If a lyric marker text begins with a / (slash) character, that means a new line should be started.
            If the text begins with a \ (backslash) character, the display should be cleared.
            Lyrics can sometimes be found in <see cref="F:ManagedBass.Midi.MidiMarkerType.Text"/> instead of <see cref="F:ManagedBass.Midi.MidiMarkerType.Lyric"/> markers.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Type"><paramref name="Type" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Track" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamGetPreset(System.Int32,System.Int32,ManagedBass.Midi.MidiFont@)">
            <summary>
            Retrieves the preset currently in use on a channel of a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream to retrieve the soundfont configuration of... 0 = get default soundfont configuration.</param>
            <param name="Channel">The MIDI channel... 0 = channel 1.</param>
            <param name="Font">The structure to receive font information.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            This function tells what preset from what soundfont is currently being used on a particular MIDI channel.
            That information can be used to get the preset's name from <see cref="M:ManagedBass.Midi.BassMidi.FontGetPreset(System.Int32,System.Int32,System.Int32)"/>.
            No preset information will be available for a MIDI channel until a note is played in that channel.
            The present and bank numbers will not necessarily match the channel's current <see cref="F:ManagedBass.Midi.MidiEventType.Program"/> and <see cref="F:ManagedBass.Midi.MidiEventType.Bank"/> event values, but rather what the MIDI stream's soundfont configuration maps those event values to.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter"><paramref name="Channel"/> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">No preset is currently in use on the specified MIDI channel.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamLoadSamples(System.Int32)">
            <summary>
            Preloads the samples required by a MIDI file stream.
            </summary>
            <param name="Handle">The MIDI stream handle.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            Samples are normally loaded as they are needed while rendering a MIDI stream, which can result in CPU spikes, particularly with packed soundfonts.
            That generally won't cause any problems, but when smooth/constant performance is critical this function can be used to preload the samples before rendering, so avoiding the need to load them while rendering.
            </para>
            <para>Preloaded samples can be compacted/unloaded just like any other samples, so it is probably wise to disable the <see cref="P:ManagedBass.Midi.BassMidi.Compact"/> option when preloading samples, to avoid any chance of the samples subsequently being automatically unloaded.</para>
            <para>This function should not be used while the MIDI stream is being rendered, as that could interrupt the rendering.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The stream is for real-time events only, so it's not possible to know what presets are going to be used. Use <see cref="M:ManagedBass.Midi.BassMidi.FontLoad(System.Int32,System.Int32,System.Int32)" /> instead.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)">
            <summary>
            Applies a soundfont configuration to a MIDI stream, or sets the default soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to apply the soundfonts to... 0 = set default soundfont configuration.</param>
            <param name="Fonts">An array of <see cref="T:ManagedBass.Midi.MidiFont" /> soundfonts to apply.</param>
            <param name="Count">The number of elements in the fonts array.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Multiple soundfonts can be stacked, each providing different presets, for example.
            When a preset is present in multiple soundfonts, the earlier soundfont in the array has priority.
            When a soundfont matching the MIDI file is loaded, that remains loaded when calling this function, and has priority over all other soundfonts.
            When a preset is not available on a non-0 bank in any soundfont, BASSMIDI will try to fall back to bank 0; first the LSB and then the MSB if still unsuccessful.
            <para>
            Changing the default configuration only affects subsequently created MIDI streams.
            Existing streams that are using the previous default configuration will continue to use that previous configuration.
            </para>
            <para>On Windows, the default default configuration will be to use the Creative 4MB (CT4MGM.SF2) or 2MB (CT2MGM.SF2) soundfont when present in the Windows system directory.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">Something in the <paramref name="Fonts" /> array is invalid, check the soundfont handles.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFontEx[],System.Int32)">
            <summary>
            Applies a soundfont configuration to a MIDI stream, or sets the default soundfont configuration.
            </summary>
            <param name="Handle">The MIDI stream to apply the soundfonts to... 0 = set default soundfont configuration.</param>
            <param name="Fonts">An array of <see cref="T:ManagedBass.Midi.MidiFontEx" /> soundfonts to apply.</param>
            <param name="Count">The number of elements in the fonts array.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Multiple soundfonts can be stacked, each providing different presets, for example.
            When a preset is present in multiple soundfonts, the earlier soundfont in the array has priority.
            When a soundfont matching the MIDI file is loaded, that remains loaded when calling this function, and has priority over all other soundfonts.
            When a preset is not available on a non-0 bank in any soundfont, BASSMIDI will try to fall back to bank 0; first the LSB and then the MSB if still unsuccessful.
            <para>
            Changing the default configuration only affects subsequently created MIDI streams.
            Existing streams that are using the previous default configuration will continue to use that previous configuration.
            </para>
            <para>On Windows, the default default configuration will be to use the Creative 4MB (CT4MGM.SF2) or 2MB (CT2MGM.SF2) soundfont when present in the Windows system directory.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Parameter">Something in the <paramref name="Fonts" /> array is invalid, check the soundfont handles.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.StreamSetFilter(System.Int32,System.Boolean,ManagedBass.Midi.MidiFilterProcedure,System.IntPtr)">
            <summary>
            Set an event filtering function on a MIDI stream.
            </summary>
            <param name="Handle">The MIDI stream handle.</param>
            <param name="Seeking">Also filter events when seeking.</param>
            <param name="Procedure">The callback function... null = no filtering.</param>
            <param name="User">User instance data to pass to the callback function.</param>
            <returns>If successful, true is returned, else false is returned. Use <see cref="P:ManagedBass.Bass.LastError"/> to get the error code.</returns>
            <remarks>
            This function allows a MIDI stream to have its events modified during playback via a callback function.
            The callback function will be called before an event is processed, and it can choose to keep the event as is, or it can modify or drop the event.
            The filtering can also be applied to events while seeking, so that playback begins in a filtered state after seeking.
            Filtering only applies to a MIDI stream's defined event sequence, not any events that are applied via <see cref="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Byte,System.Byte)"/> or <see cref="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,System.Byte[],System.Int32)"/>.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The stream does not have an event sequence.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.ConvertEvents(System.IntPtr,System.Int32,ManagedBass.Midi.MidiEvent[],System.Int32,ManagedBass.Midi.MidiEventsMode)">
            <summary>
            Convert raw MIDI data to <see cref="T:ManagedBass.Midi.MidiEvent"/> structures.
            </summary>
            <param name="Data">The raw MIDI data.</param>
            <param name="Length">The length of the data.</param>
            <param name="Events">Pointer to an array to receive the events... <see cref="F:System.IntPtr.Zero"/> = get the number of events without getting the events themselves.</param>
            <param name="Count">The maximum number of events to convert.</param>
            <param name="Flags">A combination of <see cref="F:ManagedBass.Midi.MidiEventsMode.NoRunningStatus"/> and <see cref="F:ManagedBass.Midi.MidiEventsMode.Time"/>.</param>
            <returns>If successful, the number of events processed is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError"/> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Unknown">Some mystery problem!</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.ConvertEvents(System.Byte[],System.Int32,ManagedBass.Midi.MidiEvent[],System.Int32,ManagedBass.Midi.MidiEventsMode)">
            <summary>
            Convert raw MIDI data to <see cref="T:ManagedBass.Midi.MidiEvent"/> structures.
            </summary>
            <param name="Data">The raw MIDI data.</param>
            <param name="Length">The length of the data.</param>
            <param name="Events">An array to receive the events... null = get the number of events without getting the events themselves.</param>
            <param name="Count">The maximum number of events to convert.</param>
            <param name="Flags">A combination of <see cref="F:ManagedBass.Midi.MidiEventsMode.NoRunningStatus"/> and <see cref="F:ManagedBass.Midi.MidiEventsMode.Time"/>.</param>
            <returns>If successful, the number of events processed is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError"/> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Unknown">Some mystery problem!</exception>
        </member>
        <member name="P:ManagedBass.Midi.BassMidi.Compact">
            <summary>
            Automatically compact all soundfonts following a configuration change?
            compact (bool): If true, all soundfonts are compacted following a MIDI stream being freed, or a <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)"/> call.
            The compacting isn't performed immediately upon a MIDI stream being freed or <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)"/> being called.
            It's actually done 2 seconds later (in another thread), 
            so that if another MIDI stream starts using the soundfonts in the meantime, they aren't needlessly closed and reopened.
            Samples that have been preloaded by <see cref="M:ManagedBass.Midi.BassMidi.FontLoad(System.Int32,System.Int32,System.Int32)"/> are not affected by automatic compacting.
            Other samples that have been preloaded by <see cref="M:ManagedBass.Midi.BassMidi.StreamLoadSamples(System.Int32)"/> are affected though,
            so it is probably wise to disable this option when using that function.
            By default, this option is enabled.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.BassMidi.AutoFont">
            <summary>
            Automatically load matching soundfonts?
            If set to 1 (default), BASSMIDI will try to load a soundfont matching the MIDI file. If set to 2, the matching soundfont will also be used on all banks. 
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.BassMidi.Voices">
            <summary>
            The maximum number of samples to play at a time (polyphony).
            voices (int): Maximum number of samples to play at a time... 1 (min) - 1000 (max).
            This setting determines the maximum number of samples that can play together in a single MIDI stream. 
            This isn't necessarily the same thing as the maximum number of notes, due to presets often layering multiple samples. 
            When there are no voices available to play a new sample, the voice with the lowest volume will be killed to make way for it.
            The more voices that are used, the more CPU that is required. 
            So this option can be used to restrict that, for example on a less powerful system. 
            The CPU usage of a MIDI stream can also be restricted via the <see cref="F:ManagedBass.ChannelAttribute.MidiCPU"/> attribute.
            Changing this setting only affects subsequently created MIDI streams, not any that have already been created. 
            The default setting is 128 voices.
            Platform-specific
            The default setting is 100, except on iOS, where it is 40.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.BassMidi.InputPorts">
            <summary>
            The number of MIDI Input ports to make available (Linux Only).
            ports (int): Number of Input ports... 0 (min) - 10 (max).
            MIDI Input ports allow MIDI data to be received from other software, not only MIDI devices. 
            Once a port has been initialized via <see cref="!:InInit"/>, the ALSA client and port IDs can be retrieved from <see cref="!:InGetDeviceInfo(int, out MidiDeviceInfo)"/>,
            which other software can use to connect to the port and send data to it.
            Prior to initialization, an Input port will have a client ID of 0.
            The default is for 1 Input port to be available. 
            Note: This option is only available on Linux.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.BassMidi.DefaultFont">
            <summary>
            Default soundfont usage
            filename (string): Filename of the default soundfont to use (null = no default soundfont).
            If the specified soundfont cannot be loaded, the default soundfont setting will remain as it is.
            On Windows, the default is to use one of the Creative soundfonts (28MBGM.SF2 or CT8MGM.SF2 or CT4MGM.SF2 or CT2MGM.SF2),
            if present in the windows system directory.
            </summary>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.CreateStream(System.String,System.Int64,System.Int64,ManagedBass.BassFlags,System.Int32)">
            <summary>Create a stream from file.</summary>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.CreateStream(System.IntPtr,System.Int64,System.Int64,ManagedBass.BassFlags,System.Int32)">
            <summary>Create a stream from Memory (IntPtr).</summary>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.CreateStream(System.Byte[],System.Int64,System.Int64,ManagedBass.BassFlags,System.Int32)">
            <summary>Create a stream from Memory (byte[]).</summary>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.CreateStream(ManagedBass.StreamSystem,ManagedBass.BassFlags,ManagedBass.FileProcedures,System.IntPtr,System.Int32)">
            <summary>Create a stream using User File Procedures.</summary>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.CreateStream(System.String,System.Int32,ManagedBass.BassFlags,ManagedBass.DownloadProcedure,System.IntPtr,System.Int32)">
            <summary>Create a stream from Url.</summary>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontCompact(System.Int32)">
            <summary>
            Compact a soundfont's memory usage.
            </summary>
            <param name="Handle">The soundfont to get info on (e.g. as returned by <see cref="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)" />)... 0 = all soundfonts.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            Compacting involves freeing any samples that are currently loaded but unused.
            The amount of sample data currently loaded can be retrieved using <see cref="M:ManagedBass.Midi.BassMidi.FontGetInfo(System.Int32,ManagedBass.Midi.MidiFontInfo@)" />.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontFree(System.Int32)">
            <summary>
            Frees a soundfont.
            </summary>
            <param name="Handle">The soundfont handle to free (e.g. as returned by <see cref="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)" />).</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>When a soundfont is freed, it is automatically removed from any MIDI streams that are using it.</remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontGetInfo(System.Int32,ManagedBass.Midi.MidiFontInfo@)">
            <summary>
            Retrieves information on a soundfont.
            </summary>
            <param name="Handle">The soundfont to get info on (e.g. as returned by <see cref="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)" />).</param>
            <param name="Info">An instance of <see cref="T:ManagedBass.Midi.MidiFontInfo"/> structure to store the information into.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontGetInfo(System.Int32)">
            <summary>
            Retrieves information on a soundfont.
            </summary>
            <param name="Handle">The soundfont to get info on (e.g. as returned by <see cref="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)" />).</param>
            <returns>An instance of <see cref="T:ManagedBass.Midi.MidiFontInfo"/> structure is returned. Throws <see cref="T:ManagedBass.BassException"/> on Error.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontGetPreset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the name of a preset in a soundfont.
            </summary>
            <param name="Handle">The soundfont handle to get the preset name from.</param>
            <param name="Preset">Preset number to load... -1 = all presets (the first encountered).</param>
            <param name="Bank">Bank number to load... -1 = all banks (the first encountered).</param>
            <returns>If successful, the requested preset name is returned, else <see langword="null" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The soundfont does not contain the requested preset.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontGetPresets(System.Int32,System.Int32[])">
            <summary>
            Retrieves the presets in a soundfont.
            </summary>
            <param name="Handle">The soundfont handle to get the preset name from.</param>
            <param name="Presets">The array to receive the presets.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>The presets are delivered with the preset number in the LOWORD and the bank number in the HIWORD, and in numerically ascending order.</remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontGetPresets(System.Int32)">
            <summary>
            Retrieves the presets in a soundfont.
            </summary>
            <param name="Handle">The soundfont handle to get the preset name from.</param>
            <returns>If successful, an array of presets is returned, else <see langword="null" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>The presets are delivered with the preset number in the LOWORD and the bank number in the HIWORD, and in numerically ascending order.</remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontGetVolume(System.Int32)">
            <summary>
            Retrieves a soundfont's volume level.
            </summary>
            <param name="Handle">The soundfont to get the volume of.</param>
            <returns>If successful, the soundfont's volume level is returned, else -1 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)">
            <summary>
            Initializes a soundfont from a file (unicode).
            </summary>
            <param name="File">The file name of the sound font (e.g. an .sf2 file).</param>
            <param name="Flags">Any combination of <see cref="T:ManagedBass.Midi.FontInitFlags"/>.</param>
            <returns>If successful, the soundfont's handle is returned, else 0 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            BASSMIDI uses SF2 and/or SFZ soundfonts to provide the sounds to use in the rendering of MIDI files.
            Several soundfonts can be found on the internet, including a couple on the BASS website.
            </para>
            <para>
            A soundfont needs to be initialized before it can be used to render MIDI streams.
            Once initialized, a soundfont can be assigned to MIDI streams using the <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)" /> function.
            A single soundfont can be shared by multiple MIDI streams.
            </para>
            <para>Information on the initialized soundfont can be retrieved using <see cref="M:ManagedBass.Midi.BassMidi.FontGetInfo(System.Int32,ManagedBass.Midi.MidiFontInfo@)" />.</para>
            <para>If a soundfont is initialized multiple times, each instance will have its own handle but share the same sample/etc data.</para>
            <para>
            Soundfonts use PCM sample data as standard, but BASSMIDI can accept any format that is supported by BASS or its add-ons.
            The FontPack function can be used to compress the sample data in SF2 files.
            SFZ samples are in separate files and can be compressed using standard encoding tools.
            </para>
            <para>Using soundfonts that are located somewhere other than the file system is possible via <see cref="!:FontInit(FileProcedures,IntPtr,BassFlags)" />.</para>
            <para><b>SFZ support</b></para>
            <para>
            The following SFZ opcodes are supported: ampeg_attack, ampeg_decay, ampeg_delay, ampeg_hold, ampeg_release, ampeg_sustain, ampeg_vel2attack, ampeg_vel2decay, amplfo_delay/fillfo_delay/pitchlfo_delay, amplfo_depth, amplfo_freq/fillfo_freq/pitchlfo_freq, amp_veltrack, cutoff, effect1, effect2, end, fileg_attack/pitcheg_attack, fileg_decay/pitcheg_decay, fileg_delay/pitcheg_delay, fileg_depth, fileg_hold/pitcheg_hold, fileg_release/pitcheg_release, fileg_sustain/pitcheg_sustain, fileg_vel2depth, fillfo_depth, fil_veltrack, group, hikey, hivel, key, lokey, loop_end, loop_mode, loop_start, lovel, offset, off_by, pan, pitcheg_depth, pitchlfo_depth, pitch_keycenter, pitch_keytrack, pitch_veltrack, resonance, sample, seq_length, seq_position, transpose, tune, volume. 
            The fil_type opcode is also supported, but only to confirm that a low pass filter is wanted (the filter will be disabled otherwise). 
            The combined EG and LFO entries in the opcode list reflect that there is a shared EG for pitch/filter and a shared LFO for amplitude/pitch/filter, as is the case in SF2. 
            Information on these (and other) SFZ opcodes can be found at www.sfzformat.com.
            </para>
            <para><b>Platform-specific</b></para>
            <para>The <see cref="F:ManagedBass.BassFlags.MidiFontMemoryMap"/> option is not available on big-endian systems (eg. PowerPC) as a soundfont's little-endian sample data cannot be played directly from a mapping; its byte order needs to be reversed.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.FileOpen">The <paramref name="File" /> could not be opened.</exception>
            <exception cref="F:ManagedBass.Errors.FileFormat">The file's format is not recognised/supported.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontInit(ManagedBass.FileProcedures,System.IntPtr,ManagedBass.Midi.FontInitFlags)">
            <summary>
            Initializes a soundfont via user callback functions.
            </summary>
            <param name="Procedures">The user defined file function (see <see cref="T:ManagedBass.FileProcedures" />).</param>
            <param name="User">User instance data to pass to the callback functions.</param>
            <param name="Flags">Unused.</param>
            <returns>If successful, the soundfont's handle is returned, else 0 is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>The unbuffered file system (<see cref="F:ManagedBass.StreamSystem.NoBuffer"/>) is always used by this function.</remarks>
            <exception cref="F:ManagedBass.Errors.FileFormat">The file's format is not recognised/supported.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontLoad(System.Int32,System.Int32,System.Int32)">
            <summary>
            Preloads presets from a soundfont.
            </summary>
            <param name="Handle">The soundfont handle.</param>
            <param name="Preset">Preset number to load... -1 = all presets.</param>
            <param name="Bank">Bank number to load... -1 = all banks.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            <para>
            Samples are normally loaded as they are needed while rendering a MIDI stream, which can result in CPU spikes, particularly with packed soundfonts.
            That generally won't cause any problems, but when smooth/constant performance is critical this function can be used to preload the samples before rendering, so avoiding the need to load them while rendering.
            </para>
            <para>When preloading samples to render a particular MIDI stream, it is more efficient to use <see cref="M:ManagedBass.Midi.BassMidi.StreamLoadSamples(System.Int32)" /> to preload the specific samples that the MIDI stream will use, rather than preloading the entire soundfont.</para>
            <para>Samples that are preloaded by this function are not affected by automatic compacting via the <see cref="P:ManagedBass.Midi.BassMidi.Compact" /> option, but can be compacted/unloaded manually with <see cref="M:ManagedBass.Midi.BassMidi.FontCompact(System.Int32)" />.</para>
            <para>A soundfont should not be preloaded while it's being used to render any MIDI streams, as that could delay the rendering.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.Codec">The appropriate add-on to decode the samples is not loaded.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The soundfont does not contain the requested preset.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontSetVolume(System.Int32,System.Single)">
            <summary>
            Sets a soundfont's volume level.
            </summary>
            <param name="Handle">The soundfont to set the volume of.</param>
            <param name="Volume">The volume level... 0=silent, 1.0=normal/default.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            By default, some soundfonts may be louder than others, which could be a problem when mixing multiple soundfonts. 
            This function can be used to compensate for any differences, by raising the level of the quieter soundfonts or lowering the louder ones.
            <para>Changes take immediate effect in any MIDI streams that are using the soundfont.</para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontUnload(System.Int32,System.Int32,System.Int32)">
            <summary>
            Unloads presets from a soundfont.
            </summary>
            <param name="Handle">The soundfont handle.</param>
            <param name="Preset">Preset number to load... -1 = all presets.</param>
            <param name="Bank">Bank number to load... -1 = all banks.</param>
            <returns>If successful, <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            An unloaded preset will be loaded again when needed by a MIDI stream.
            Any samples that are currently being used by a MIDI stream will not be unloaded.
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The soundfont does not contain the specified preset, or the soundfont is memory mapped.</exception>
        </member>
        <member name="M:ManagedBass.Midi.BassMidi.FontUnpack(System.Int32,System.String)">
            <summary>
            Produces a decompressed version of a packed soundfont.
            </summary>
            <param name="Handle">The soundfont to unpack.</param>
            <param name="OutFile">Filename for the unpacked soundfont.</param>
            <returns>If successful, the <see langword="true" /> is returned, else <see langword="false" /> is returned. Use <see cref="P:ManagedBass.Bass.LastError" /> to get the error code.</returns>
            <remarks>
            To unpack a soundfont, the appropriate BASS add-on needs to be loaded (via <see cref="M:ManagedBass.Bass.PluginLoad(System.String)" />) to decode the samples. 
            For example, if the samples are FLAC encoded, BASSFLAC would need to be loaded. 
            BASS also needs to have been initialized, using <see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)" />. 
            For just unpacking a soundfont, the <see cref="F:ManagedBass.Bass.NoSoundDevice"/> could be used.
            <para>
            A soundfont should not be unpacked while it is being used to render any MIDI streams, as that could delay the rendering.
            <see cref="M:ManagedBass.Midi.BassMidi.FontGetInfo(System.Int32,ManagedBass.Midi.MidiFontInfo@)" /> can be used to check if a soundfont is packed.
            </para>
            </remarks>
            <exception cref="F:ManagedBass.Errors.Handle"><paramref name="Handle" /> is not valid.</exception>
            <exception cref="F:ManagedBass.Errors.NotAvailable">The soundfont is not packed.</exception>
            <exception cref="F:ManagedBass.Errors.Init"><see cref="M:ManagedBass.Bass.Init(System.Int32,System.Int32,ManagedBass.DeviceInitFlags,System.IntPtr,System.IntPtr)" /> has not been successfully called - it needs to be to decode the samples.</exception>
            <exception cref="F:ManagedBass.Errors.Codec">The appropriate add-on to decode the samples is not loaded.</exception>
            <exception cref="F:ManagedBass.Errors.Create">Couldn't create the output file, <paramref name="OutFile" />.</exception>
            <exception cref="F:ManagedBass.Errors.Unknown">Some other mystery problem!</exception>
        </member>
        <member name="T:ManagedBass.Midi.MidiDeviceInfo">
            <summary>
            Used with <see cref="!:BassMidi.InGetDeviceInfo(int, out MidiDeviceInfo)" /> to retrieve information on a MIDI input device.
            </summary>
            <remarks>
            <para>
            On Windows, <see cref="P:ManagedBass.Midi.MidiDeviceInfo.ID"/> consists of a manufacturer identifier in the LOWORD and a product identifier in the HIWORD.
            This will not uniquely identify a particular device, ie. multiple devices may have the same value..
            On OSX, <see cref="P:ManagedBass.Midi.MidiDeviceInfo.ID"/> is the device's "kMIDIPropertyUniqueID" property value, which is unique to the device.
            On Linux, id contains the device's ALSA client ID in the LOWORD and port ID in the HIWORD.</para>
            </remarks>
        </member>
        <member name="P:ManagedBass.Midi.MidiDeviceInfo.ID">
            <summary>
            An identification number.
            </summary>
            <remarks>
            On Windows, <see cref="P:ManagedBass.Midi.MidiDeviceInfo.ID"/> consists of a manufacturer identifier in the LOWORD and a product identifier in the HIWORD.
            This will not uniquely identify a particular device, ie. multiple devices may have the same value..
            On OSX, <see cref="P:ManagedBass.Midi.MidiDeviceInfo.ID"/> is the device's "kMIDIPropertyUniqueID" property value, which is unique to the device.
            On Linux, id contains the device's ALSA client ID in the LOWORD and port ID in the HIWORD.
            </remarks>
        </member>
        <member name="P:ManagedBass.Midi.MidiDeviceInfo.Name">
            <summary>
            The name/description of the device.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.MidiDeviceInfo.IsEnabled">
            <summary>
            Gets whether the device is enabled.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.MidiDeviceInfo.IsInitialized">
            <summary>
            Gets whether the device is already initialized.
            </summary>
        </member>
        <member name="M:ManagedBass.Midi.MidiDeviceInfo.ToString">
            <summary>
            Returns the Name of the Device.
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiEvent">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.StreamEvents(System.Int32,ManagedBass.Midi.MidiEventsMode,ManagedBass.Midi.MidiEvent[],System.Int32)"/> to apply events and <see cref="M:ManagedBass.Midi.BassMidi.StreamGetEvents(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,ManagedBass.Midi.MidiEvent[])"/> to retrieve events, and <see cref="M:ManagedBass.Midi.BassMidi.CreateStream(ManagedBass.Midi.MidiEvent[],System.Int32,ManagedBass.BassFlags,System.Int32)"/> to play event sequences.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEvent.EventType">
            <summary>
            The Event Type
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEvent.Parameter">
            <summary>
            The Event Parameter
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEvent.Channel">
            <summary>
            The MIDI Channel of the event... 0 = channel 1
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEvent.Ticks">
            <summary>
            The Position of the event, in ticks
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiEvent.Position">
            <summary>
            The Position of the event, in bytes
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiFont">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)" /> and <see cref="M:ManagedBass.Midi.BassMidi.StreamGetFonts(System.Int32,ManagedBass.Midi.MidiFont[],System.Int32)" /> to set and retrieve soundfont configurations.
            </summary>
            <remarks>
            When using an individual preset from a soundfont, BASSMIDI will first look for the exact preset and bank match, but if that is not present, the first preset from the soundfont will be used.
            This is useful for single preset soundfonts.
            Individual presets can be assigned to program numbers beyond the standard 127 limit, up to 65535, which can then be accessed via <see cref="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Int32)"/>.
            <para>
            When using all presets in a soundfont, the bank member is a base number that is added to the soundfont's banks.
            For example, if bank=1 then the soundfont's bank 0 becomes bank 1, etc.
            Negative base numbers are allowed.
            </para>
            <para>For more flexible mapping of soundfont presets to MIDI programs, see the <see cref="T:ManagedBass.Midi.MidiFontEx" /> structure.</para>
            </remarks>
        </member>
        <member name="F:ManagedBass.Midi.MidiFont.Handle">
            <summary>
            Soundfont handle, previously inititialized with <see cref="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFont.Preset">
            <summary>
            Preset number... 0-65535, -1 = use all presets in the soundfont.
            This determines what <see cref="F:ManagedBass.Midi.MidiEventType.Program"/> event value(s) the soundfont is used for.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFont.Bank">
            <summary>
            Base bank number, or the bank number of the individual preset.
            This determines what <see cref="F:ManagedBass.Midi.MidiEventType.Bank"/> event value(s) the soundfont is used for.
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiFontEx">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.StreamSetFonts(System.Int32,ManagedBass.Midi.MidiFontEx[],System.Int32)" /> and <see cref="M:ManagedBass.Midi.BassMidi.StreamGetFonts(System.Int32,ManagedBass.Midi.MidiFontEx[],System.Int32)" /> to set and retrieve soundfont configurations.
            </summary>
            <remarks>
            This is an extended version of the <see cref="T:ManagedBass.Midi.MidiFont" /> structure that allows more flexible mapping of soundfont presets to MIDI programs, including access to the bank LSB (eg. MIDI controller 32).
            <para>
            When using an individual preset from a soundfont, BASSMIDI will first look for the exact <see cref="F:ManagedBass.Midi.MidiFontEx.SoundFontPreset"/> and <see cref="F:ManagedBass.Midi.MidiFontEx.SoundFontBank"/> match, but if that is not present, the first preset from the soundfont will be used.
            This is useful for single preset soundfonts.
            Individual presets can be assigned to program numbers beyond the standard 127 limit, up to 65535, which can then be accessed via <see cref="M:ManagedBass.Midi.BassMidi.StreamEvent(System.Int32,System.Int32,ManagedBass.Midi.MidiEventType,System.Int32)" />.
            </para>
            <para>
            When using all presets from all banks in a soundfont, the <see cref="F:ManagedBass.Midi.MidiFontEx.DestinationBank"/> member is a base number that is added to the soundfont's banks.
            For example, if <see cref="F:ManagedBass.Midi.MidiFontEx.DestinationBank"/> = 1 then the soundfont's bank 0 becomes bank 1, etc.
            Negative base numbers are allowed, to lower a soundfont's bank numbers.
            </para>
            <para>
            The bank LSB raises the maximum number of melodic banks from 128 to 16384 (128 x 128).
            But, the SF2 soundfont format only supports 128 banks.
            So a soundfont that is set to be used on all banks (<see cref="F:ManagedBass.Midi.MidiFontEx.DestinationPreset"/> and <see cref="F:ManagedBass.Midi.MidiFontEx.DestinationBank"/> are -1) will still only apply to the single bank LSB specified by <see cref="F:ManagedBass.Midi.MidiFontEx.DestinationBankLSB"/>.
            </para>
            </remarks>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontEx.Handle">
            <summary>
            Soundfont handle, previously inititialized with <see cref="M:ManagedBass.Midi.BassMidi.FontInit(System.String,ManagedBass.Midi.FontInitFlags)" />.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontEx.SoundFontPreset">
            <summary>
            Soundfont preset number... 0-127, -1 = use all presets.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontEx.SoundFontBank">
            <summary>
            Soundfont bank number... 0-128, -1 = use all banks.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontEx.DestinationPreset">
            <summary>
            Destination preset/program number... 0-65535, -1 = all presets.
            This determines what <see cref="F:ManagedBass.Midi.MidiEventType.Program"/> event value(s) the soundfont is used for.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontEx.DestinationBank">
            <summary>
            Destination bank number, or a base bank number when using all presets from all banks.
            This determines what <see cref="F:ManagedBass.Midi.MidiEventType.Bank"/> event value(s) the soundfont is used for.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontEx.DestinationBankLSB">
            <summary>
            Destination bank number LSB.
            This is the <see cref="F:ManagedBass.Midi.MidiEventType.BankLSB"/> event value that the soundfont is used for.
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiFontInfo">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.FontGetInfo(System.Int32,ManagedBass.Midi.MidiFontInfo@)" /> to retrieve information on a soundfont.
            </summary>
            <remarks>
            The <see cref="P:ManagedBass.Midi.MidiFontInfo.Name"/>, <see cref="P:ManagedBass.Midi.MidiFontInfo.Copyright"/> and <see cref="P:ManagedBass.Midi.MidiFontInfo.Comment"/> information might not be included in some SF2 files. 
            Only the <see cref="F:ManagedBass.Midi.MidiFontInfo.Presets"/>, <see cref="F:ManagedBass.Midi.MidiFontInfo.SampleDataLoaded"/> and <see cref="F:ManagedBass.Midi.MidiFontInfo.SampleDataType"/> members are available with SFZ files, with the <see cref="F:ManagedBass.Midi.MidiFontInfo.SampleDataType"/> value reflecting the most recently loaded encoded sample (it is possible for different samples to use different encoding).
            </remarks>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontInfo.Presets">
            <summary>
            The number of presets/instruments in the soundfont.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontInfo.SampleDataSize">
            <summary>
            The total size (in bytes) of the sample data in the soundfont.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontInfo.SampleDataLoaded">
            <summary>
            The amount of sample data currently loaded... -1 = the soundfont is memory mapped.
            </summary>
        </member>
        <member name="F:ManagedBass.Midi.MidiFontInfo.SampleDataType">
            <summary>
            The <see cref="T:ManagedBass.ChannelType"/> format of the sample data if it's packed... -1 = Unknown format (appropriate BASS add-on not loaded), 0 = not packed.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.MidiFontInfo.Name">
            <summary>
            Name of the soundfont.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.MidiFontInfo.Copyright">
            <summary>
            Copyright notice.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.MidiFontInfo.Comment">
            <summary>
            Any comments.
            </summary>
        </member>
        <member name="T:ManagedBass.Midi.MidiMarker">
            <summary>
            Used with <see cref="M:ManagedBass.Midi.BassMidi.StreamGetMark(System.Int32,ManagedBass.Midi.MidiMarkerType,System.Int32,ManagedBass.Midi.MidiMarker@)" />, <see cref="F:ManagedBass.SyncFlags.MidiLyric" />, <see cref="F:ManagedBass.SyncFlags.MidiCue" /> and <see cref="F:ManagedBass.SyncFlags.MidiMarker" /> to retrieve markers.
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.MidiMarker.Text">
            <summary>
            The marker, cue, lyric, keysig, timesig text.
            </summary>
            <remarks>
            If the lyric text begins with a '/' (slash) character, a new line should be started. 
            If it begins with a '\' (backslash) character, the display should be cleared.
            <para>
            For a key signature event (MIDI meta event 89).
            The marker text is in the form of "a b", where a is the number of sharps (if positive) or flats (if negative), and b signifies major (if 0) or minor (if 1).
            </para>
            <para>
            For a time signature events (MIDI meta event 88).
            The marker text is in the form of "a/b c d", where a is the numerator, b is the denominator, c is the metronome pulse, and d is the number of 32nd notes per MIDI quarter-note.
            </para>
            </remarks>
        </member>
        <member name="P:ManagedBass.Midi.MidiMarker.Track">
            <summary>
            The MIDI track (number) containing marker (0=first).
            </summary>
        </member>
        <member name="P:ManagedBass.Midi.MidiMarker.Position">
            <summary>
            The position (in bytes) of the marker.
            </summary>
        </member>
    </members>
</doc>
